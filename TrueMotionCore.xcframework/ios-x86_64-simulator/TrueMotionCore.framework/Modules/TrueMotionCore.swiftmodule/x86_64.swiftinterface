// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrueMotionCore
import Foundation
import Swift
public enum Endpoint {
}
@_hasMissingDesignatedInitializers final public class TMCore {
  final public var networkService: TrueMotionCore.NetworkService!
  final public var authenticationManager: TrueMotionCore.AuthenticationManager!
  public static var shared: TrueMotionCore.TMCore
  public static func initialize(with configuration: TrueMotionCore.TMCoreConfiguration)
  @objc deinit
}
public enum TrueMotionAuthenticationError : Foundation.LocalizedError {
  case expiredCodeError(Swift.String)
  case generic(Swift.String)
  case invalidCodeError(Swift.String)
  case invalidPhoneNumber(Swift.String)
  case networkError
  case notEnrolledNumber(Swift.String)
  case verifyNotCalled
  public var errorDescription: Swift.String {
    get
  }
}
public struct TMCoreConfiguration {
  public let baseURL: Foundation.URL
  public let companyID: Swift.String
  public init(baseURL: Foundation.URL, companyID: Swift.String)
}
public enum HTTPMethod : Swift.String {
  case connect
  case delete
  case get
  case head
  case options
  case patch
  case post
  case put
  case trace
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol NetworkService : AnyObject {
  func request(endpoint: Foundation.URL, method: TrueMotionCore.HTTPMethod, onComplete: @escaping (Swift.Result<TrueMotionCore.NetworkServiceResult, Swift.Error>) -> Swift.Void)
  func request<Parameter>(endpoint: Foundation.URL, method: TrueMotionCore.HTTPMethod, parameter: Parameter, onComplete: @escaping (Swift.Result<TrueMotionCore.NetworkServiceResult, Swift.Error>) -> Swift.Void) where Parameter : Swift.Encodable
  func request<Model>(type: Model.Type, endpoint: Foundation.URL, method: TrueMotionCore.HTTPMethod, onComplete: @escaping (Swift.Result<Model, Swift.Error>) -> Swift.Void) where Model : Swift.Decodable
  func request<Parameter, Model>(type: Model.Type, endpoint: Foundation.URL, method: TrueMotionCore.HTTPMethod, parameter: Parameter, onComplete: @escaping (Swift.Result<Model, Swift.Error>) -> Swift.Void) where Parameter : Swift.Encodable, Model : Swift.Decodable
}
public struct TrueMotionServerError : Foundation.LocalizedError {
}
public struct NetworkServiceResult {
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
}
public protocol AuthenticationManager {
  func verify(phoneNumber: Swift.String, onComplete: @escaping ((Swift.Result<Swift.Void, TrueMotionCore.TrueMotionAuthenticationError>) -> Swift.Void))
  func resend()
  func loginWithOTP(otp: Swift.String, onComplete: @escaping ((Swift.Result<Swift.Void, TrueMotionCore.TrueMotionAuthenticationError>) -> Swift.Void))
  func loginWithToken(driverId: Swift.String, jwt: Swift.String, shouldAutoRegister: Swift.Bool, shouldSkipEnrollment: Swift.Bool, onComplete: @escaping ((Swift.Result<Swift.Void, TrueMotionCore.TrueMotionAuthenticationError>) -> Swift.Void))
  func logout(onComplete: @escaping ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void))
}
extension TrueMotionCore.HTTPMethod : Swift.Equatable {}
extension TrueMotionCore.HTTPMethod : Swift.Hashable {}
extension TrueMotionCore.HTTPMethod : Swift.RawRepresentable {}
